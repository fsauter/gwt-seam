#summary Getting Started with GWTP Dispatch.

Follow the steps on GettingStartedGWTRPC.

== Configuration == 

Create the following component:

{{{
@Name("gwtpDispatchConfiguration")
public class SeamDispatchConfiguration implements DispatchConfiguration {

	@Override
	public String getEndPoint() {
		return DispatchConfiguration.DEFAULT_ENDPOINT;
	}

	@Override
	public void configureHandlers(HandlerRegistry handlerRegistry) {
		handlerRegistry.bindHandler(HelloWorldAction.class, HelloWorldHandler.class, LoggedInActionValidator.class);
	}

}
}}}

The important thing is the `@Name("gwtpDispatchConfiguration")` annotation. This component is equivalent to [http://code.google.com/p/gwt-platform/source/browse/gwtp-core/gwtp-dispatch-server/src/main/java/com/gwtplatform/dispatch/server/guice/HandlerModule.java GWTP's Guice Handler Module].

`getEndPoint` has no effect yet. But later on you'll be able to set your custom endpoint.

== The handler ==

{{{ 
@AutoCreate
@Name("helloWorldHandler")
@Scope(ScopeType.APPLICATION)
public class HelloWorldHandler implements ActionHandler<HelloWorldAction, HelloWorldResult> {

	@Override
	public HelloWorldResult execute(HelloWorldAction action, ExecutionContext context) throws ActionException {
		HelloWorldResult result = new HelloWorldResult("Hello " + action.getName() + "!");
		return result;
	}

	@Override
	public void undo(HelloWorldAction action, HelloWorldResult result, ExecutionContext context) throws ActionException {
		// Nothing to do.
	}

	@Override
	public Class<HelloWorldAction> getActionType() {
		return HelloWorldAction.class;
	}
}
}}}


== The validator == 
The great thing is, you've got access to all contexts (e.g. you could say @In MyCompontent myComponent etc.)

{{{
@AutoCreate
@Name("loggedInActionValidator")
@Scope(ScopeType.APPLICATION)
public class LoggedInActionValidator implements ActionValidator {
	
	@Override
	public boolean isValid(Action<? extends Result> action) throws ActionException {
		return Identity.instance().isLoggedIn();
	}

}
}}}