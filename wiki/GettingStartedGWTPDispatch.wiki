#summary Getting Started with Seam GWTP Dispatch.
#labels Phase-Deploy,Featured,Phase-Implementation,GWTP,Dispatch

<wiki:toc max_depth="2" />

== Notice ==

You should already be familiar with the [http://code.google.com/p/gwt-platform/wiki/GettingStartedDispatch GWTP Dispatch Module] and a working GWTP project skeleton in your src folder which inherits the GWTP Dispatch Module.

== Setting up server ==

 # Copy (override) gwt-servlet.jar to EAR project, lib folder. (this jar is from gwt and not from seam)
 # download gwt-seam.jar from the download section 
 # Add gwt-seam.jar to 
   * your lib folder 
   * the build path
   * the deployed ear jars

== The configuration == 

Create the following component:

{{{
@Name(DispatchConfiguration.COMPONENT_NAME)
@SecurityCookieFilterConfig(filterClass = HttpSessionSecurityCookieFilter.class, cookieName = "MYCOOKIE")
public class SeamDispatchConfiguration implements DispatchConfiguration {

	@Override
	public void configureHandlers(HandlerRegistry handlerRegistry) {
		handlerRegistry.bindHandler(HelloWorldAction.class, HelloWorldHandler.class, LoggedInActionValidator.class);
	}

}
}}}

Please be aware of the `@Name(DispatchConfiguration.COMPONENT_NAME)` annotation (it has to be this name and not any other). This component is equivalent to [http://code.google.com/p/gwt-platform/source/browse/gwtp-core/gwtp-dispatch-server/src/main/java/com/gwtplatform/dispatch/server/guice/HandlerModule.java GWTP's Guice Handler Module].

== The action and result ==
Only thing to know: The serviceName/endpoint have to be `seam/resource/gwtp` unless you've set your own CustomEndpoint. 

{{{
@GenDispatch(serviceName=DispatchConfiguration.DEFAULT_ENDPOINT, isSecure=false)
public class HelloWorld {

	@In(1) String name;
	
	@Out(1) String greeting;
}
}}}

== The handler ==
It is important that this handler is annotated with `@Name` to tell anybody (particularly seam) that this is a component which can be managed by seam. The `ScopeType` should be Application so seam does not have to create each time a new instance

{{{ 
@Name("helloWorldHandler")
@Scope(ScopeType.APPLICATION)
public class HelloWorldHandler implements ActionHandler<HelloWorldAction, HelloWorldResult> {

	@Override
	public HelloWorldResult execute(HelloWorldAction action, ExecutionContext context) throws ActionException {
		HelloWorldResult result = new HelloWorldResult("Hello " + action.getName() + "!");
		return result;
	}

	@Override
	public void undo(HelloWorldAction action, HelloWorldResult result, ExecutionContext context) throws ActionException {
		// Nothing to do.
	}

	@Override
	public Class<HelloWorldAction> getActionType() {
		return HelloWorldAction.class;
	}
}
}}}


== The validator == 
It is important that this validator is also annotated with `@Name`.

The great thing is, you've got access to all contexts (e.g. you could say `@In MyCompontent myComponent` etc.)

{{{
@Name("loggedInActionValidator")
@Scope(ScopeType.APPLICATION)
public class LoggedInActionValidator implements ActionValidator {
	
	@Override
	public boolean isValid(Action<? extends Result> action) throws ActionException {
		return Identity.instance().isLoggedIn();
	}

}
}}}

== Protecting against XSRF attacks  ==

To protect your application against XSRF attacks, as described in <a href="http://groups.google.com/group/Google-Web-Toolkit/web/security-for-gwt-applications">Security for GWT Applications </a>, you have to annotate your `DispatchConfiguration` with the following annotation:

{{{
...
import com.gwtplatform.dispatch.server.seam.HttpSessionSecurityCookieFilter;
....
@SecurityCookieFilterConfig(filterClass = HttpSessionSecurityCookieFilter.class, cookieName = "MYCOOKIE")
public class SeamDispatchConfiguration implements DispatchConfiguration {
...
}}}

{{{
...
import com.gwtplatform.dispatch.server.seam.RandomSessionSecurityCookieFilter;
....
@SecurityCookieFilterConfig(filterClass = RandomSessionSecurityCookieFilter.class, cookieName = "MYCOOKIE")
public class SeamDispatchConfiguration implements DispatchConfiguration {
...
}}}

By default gwt-seam is using the filter url pattern: 
{{{
*.html
}}}

You can change this property adding following line to your gwtseam.properties file (see CustomEndpoint):
{{{
gwtp.security.filter.pattern=seam/resource/*
}}}
Or: 
{{{
gwtp.security.filter.pattern=*.jsp
}}}